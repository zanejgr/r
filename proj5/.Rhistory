source("myLab5.r")
mybin(n=10,p=0.7,iter=100)
map(c(100,200,500,1000,10000),~mybin(iter=.x,n=10,p=0.7))->table
table[5]%>%kable()
dbinom(0.7,10000,10)
mybin(n=10,p=0.7,iter=100)
map(c(100,200,500,1000,10000),~mybin(iter=.x,n=10,p=0.7))->table
table[5]%>%kable()
dbinom(10,100000,0.7)
dbinom(10,100000,0.7)->lel
mybin(n=10,p=0.7,iter=100)
map(c(100,200,500,1000,10000),~mybin(iter=.x,n=10,p=0.7))->table
table[5]%>%kable()
dbinom(1:10,100000,0.7)->WHY
mybin(n=10,p=0.7,iter=100)
map(c(100,200,500,1000,10000),~mybin(iter=.x,n=10,p=0.7))->table
table[5]%>%kable()
dbinom(1:10,100000,rep(0.7,10)->WHY
knitr::opts_chunk$set(echo = TRUE)
getwd()
library(purrr)
library(magrittr)
library(knitr)
library(data.table)
source("myLab5.r")
getwd()
mybin(n=10,p=0.7,iter=100)
map(c(100,200,500,1000,10000),~mybin(iter=.x,n=10,p=0.7))->table
table[5]%>%kable()
dbinom(1:10,100000,rep(0.7,10))->WHY
map(c(100,200,500,1000,10000),~mybin(iter=.x,n=10,p=0.7))->table
table[5]%>%kable()
dbinom(11,100,0.70,FALSE)
map(c(100,200,500,1000,10000),~mybin(iter=.x,n=10,p=0.7))->table
table[5]%>%kable()
dbinom(0:10,10,0.70,FALSE)
select(20,5)
select(5,20)
mySelect(5,20)
View(mymult)
View(mysample)
View(mysample)
View(mysample)
mysample(5)
mysample(5)->foo
sample(c(rep('b',8),rep('w',12)),5)
knitr::opts_chunk$set(echo = TRUE)
getwd()
library(purrr)
library(magrittr)
library(knitr)
library(data.table)
source("myLab5.r")
sample(c(rep('b',8),rep('w',12)),5)
sample(c(rep('b',8),rep('w',12)),5,replace = TRUE)
myhyper()
myhyper=function(iter=100,N=20,r=12,n=5){
# make a matrix to hold the samples
#initially filled with NA's
sam.mat=matrix(NA,nr=n,nc=iter, byrow=TRUE)
#Make a vector to hold the number of successes over the trials
succ=c()
for( i in 1:iter){
#Fill each column with a new sample
sam.mat[,i]=sample(rep(c(1,0),c(r,N-r)),n,replace=FALSE)
#Calculate a statistic from the sample (this case it is the sum)
succ[i]=sum(sam.mat[,i])
}
#Make a table of successes
succ.tab=table(factor(succ,levels=0:n))
#Make a barplot of the proportions
barplot(succ.tab/(iter), col=rainbow(n+1), main="HYPERGEOMETRIC simulation", xlab="Number of successes")
succ.tab/iter
}
View(myhyper)
sample(c(rep('b',8),rep('w',12)),5)
sample(c(rep('b',8),rep('w',12)),5,replace = TRUE)
myhyper(iter=10000)
dhyper(0:5,12,8,5)
mysample(1000,30,1)
View(mysample)
choose(4,8)
choose(8,4)
choose(8,4)
ppois(1:4,2)
choose(8,4)
dpois(1:4,2)
choose(8,4)
qpois(1:4,2)
choose(8,4)
dpois(1:4,2)
choose(8,4)
ppois(1:4,2)
choose(8,4)
ppois(0:3,2)
choose(8,4)
ppois(3,2,FALSE)
choose(8,4)
ppois(4,2,FALSE)
choose(8,4)
ppois(4,2,FALSE,FALSE)
choose(8,4)
ppois(4,2,FALSE,FALSE)
dnbinom(.4,3, 10)
choose(8,4)
ppois(4,2,FALSE,FALSE)
qnbinom( 10,3,.4)
choose(8,4)
ppois(4,2,FALSE,FALSE)
dnbinom( 10,3,.4)
choose(8,4)
ppois(4,2,FALSE,FALSE)
dnbinom( 10,3,.4)
qbinom(3,10,.4)
choose(8,4)
ppois(4,2,FALSE,FALSE)
dnbinom( 10,3,.4)
pbinom(10,3,.4)
choose(8,4)
ppois(4,2,FALSE,FALSE)
dnbinom( 10,3,.4)
pbinom(3,10,.4)
##myNBinom runs numTr negative binomial trials, plotting the resulting distribution
myNBinom = function(goal=10,odds=.5,numTr = 10000){
res=c()
for(i in 1:numTr){
numsucc<-numtrials<-0
while(numsucc<goal){
if(i<odds)
numsucc
numtrials++
}
##myNBinom runs numTr negative binomial trials, plotting the resulting distribution
myNBinom = function(goal=10,odds=.5,numTr = 10000){
res=c()
for(i in 1:numTr){
numsucc<-numtrials<-0
while(numsucc<goal){
if(i<odds){
numsucc++
}else{}
##myNBinom runs numTr negative binomial trials, plotting the resulting distribution
myNBinom = function(goal=10,odds=.5,numTr = 10000){
res=c()
for(i in 1:numTr){
numsucc<-numtrials<-0
while(numsucc<goal){
if(i<odds){
numsucc<-numsucc+1
}else{}
numtrials<-numtrials+1
}
res<-c(res,numtrials)
}
return(length(res))
}
myNBinom()
##myNBinom runs numTr negative binomial trials, plotting the resulting distribution
myNBinom = function(goal=10,odds=.5,numTr = 10000){
res=c()
for(i in 1:numTr){
numsucc<-numtrials<-0
while(numsucc<goal){
if(i<odds){
numsucc<-numsucc+1
}else{}
numtrials<-numtrials+1
}
res<-c(res,numtrials)
}
plot(res)
return(length(res))
}
myNBinom()
View(myNBinom)
myNBinom(numTr=1)
myNBinom(1,1,1)
myNBinom(1,1,1)
mybirthday = function(n)
{
# One problem is the size of the numbers
# Use log to make calculation manageable lfactorial is the log of the factorial
# Below is log(P(AC))
logpAc = lfactorial(365)-lfactorial(365-(1:n))-(1:n)*log(n)
pAc=exp(logpAc)
pA = 1- pAc
names(pA)=1:n
pie(pA, col=rainbow(32)
mat = matrix(c(round(pA,2)), nr=n, nc=1, byrow=FALSE,
dimnames=list("Number in room"=1:n, c("pA")))
as.table(mat)
}
mybirthday(32)
mybirthday = function(n)
{
# One problem is the size of the numbers
# Use log to make calculation manageable lfactorial is the log of the factorial
# Below is log(P(AC))
logpAc = lfactorial(365)-lfactorial(365-(1:n))-(1:n)*log(n)
pAc=exp(logpAc)
pA = 1- pAc
names(pA)=1:n
pie(pA, col=rainbow(32)
mat = matrix(c(round(pA,2)), nr=n, nc=1, byrow=FALSE,
dimnames=list("Number in room"=1:n, c("pA")))
as.table(mat)
}
library()
mybirthday = function(n)
{
# One problem is the size of the numbers
# Use log to make calculation manageable lfactorial is the log of the factorial
# Below is log(P(AC))
logpAc = lfactorial(365) - lfactorial(365 - (1:n)) - (1:n) * log(n)
pAc = exp(logpAc)
pA = 1 - pAc
names(pA) = 1:n
pie(
pA,
col = rainbow(32)
mat = matrix(
c(round(pA, 2)),
nr = n,
nc = 1,
byrow = FALSE,
dimnames = list("Number in room" = 1:n, c("pA"))
)
as.table(mat)
}
mybirthday(32)
mybirthday = function(n)
{
# One problem is the size of the numbers
# Use log to make calculation manageable lfactorial is the log of the factorial
# Below is log(P(AC))
logpAc = lfactorial(365) - lfactorial(365 - (1:n)) - (1:n) * log(n)
pAc = exp(logpAc)
pA = 1 - pAc
names(pA) = 1:n
pie(
pA,
col = rainbow(32)
mat = matrix(
c(round(pA, 2)),
nr = n,
nc = 1,
byrow = FALSE,
dimnames = list("Number in room" = 1:n, c("pA"))
)
as.table(mat)
}
mybirthday = function(n)
{
# One problem is the size of the numbers
# Use log to make calculation manageable lfactorial is the log of the factorial
# Below is log(P(AC))
logpAc = lfactorial(365) - lfactorial(365 - (1:n)) - (1:n) * log(n)
pAc = exp(logpAc)
pA = 1 - pAc
names(pA) = 1:n
pie(
pA,
col = rainbow(32)
mat = matrix(
c(round(pA, 2)),
nr = n,
nc = 1,
byrow = FALSE,
dimnames = list("Number in room" = 1:n, c("pA"))
)
as.table(mat)
}
source('~/.active-rstudio-document')
mat = matrix(
c(round(pA, 2)),
nr = n,
nc = 1,
byrow = FALSE,
dimnames = list("Number in room" = 1:n, c("pA"))
)
ybirthday = function(n)
{
# One problem is the size of the numbers
# Use log to make calculation manageable lfactorial is the log of the factorial
# Below is log(P(AC))
logpAc = lfactorial(365) - lfactorial(365 - (1:n)) - (1:n) * log(n)
pAc = exp(logpAc)
pA = 1 - pAc
names(pA) = 1:n
pie(
pA,
col = rainbow(32)
)
mat = matrix(
c(round(pA, 2)),
nr = n,
nc = 1,
byrow = FALSE,
dimnames = list("Number in room" = 1:n, c("pA"))
)
as.table(mat)
}
mybirthday(32)
mybirthday = function(n)
{
# One problem is the size of the numbers
# Use log to make calculation manageable lfactorial is the log of the factorial
# Below is log(P(AC))
logpAc = lfactorial(365) - lfactorial(365 - (1:n)) - (1:n) * log(n)
pAc = exp(logpAc)
pA = 1 - pAc
names(pA) = 1:n
pie(
pA,
col = rainbow(32)
)
mat = matrix(
c(round(pA, 2)),
nr = n,
nc = 1,
byrow = FALSE,
dimnames = list("Number in room" = 1:n, c("pA"))
)
as.table(mat)
}
mybirthday(32)
pie(
x=pA,
col = rainbow(32)
)
mybirthday = function(n)
{
# One problem is the size of the numbers
# Use log to make calculation manageable lfactorial is the log of the factorial
# Below is log(P(AC))
logpAc = lfactorial(365) - lfactorial(365 - (1:n)) - (1:n) * log(n)
pAc = exp(logpAc)
pA = 1 - pAc
names(pA) = 1:n
pie(
x=pA,
col = rainbow(32)
)
mat = matrix(
c(round(pA, 2)),
nr = n,
nc = 1,
byrow = FALSE,
dimnames = list("Number in room" = 1:n, c("pA"))
)
as.table(mat)
}
mybirthday(32)
pie(
pA,
col = rainbow(32)
)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
# One problem is the size of the numbers
# Use log to make calculation manageable lfactorial is the log of the factorial
# Below is log(P(AC))
logpAc = lfactorial(365) - lfactorial(365 - (1:n)) - (1:n) * log(n)
pAc = exp(logpAc)
pA = 1 - pAc
names(pA) = 1:n
pie(
pA,
col = rainbow(32)
)
mat = matrix(
c(round(pA, 2)),
nr = n,
nc = 1,
byrow = FALSE,
dimnames = list("Number in room" = 1:n, c("pA"))
)
as.table(mat)
mybirthday = function(n)
{
# One problem is the size of the numbers
# Use log to make calculation manageable lfactorial is the log of the factorial
# Below is log(P(AC))
logpAc = lfactorial(365) - lfactorial(365 - (1:n)) - (1:n) * log(n)
pAc = exp(logpAc)
pA = 1 - pAc
names(pA) = 1:n
pie(
pA,
col = rainbow(32)
)
mat = matrix(
c(round(pA, 2)),
nr = n,
nc = 1,
byrow = FALSE,
dimnames = list("Number in room" = 1:n, c("pA"))
)
as.table(mat)
}
mybirthday(32)
pa
pA
logpAc
# One problem is the size of the numbers
# Use log to make calculation manageable lfactorial is the log of the factorial
# Below is log(P(AC))
logpAc = lfactorial(365)-lfactorial(365-(1:n))-(1:n)*log(n)
mybirthday = function(n)
{
# One problem is the size of the numbers
# Use log to make calculation manageable lfactorial is the log of the factorial
# Below is log(P(AC))
logpAc = lfactorial(365)-lfactorial(365-(1:n))-(1:n)*log(n)
pAc = exp(logpAc)
pA = 1 - pAc
names(pA) = 1:n
pie(
pA,
col = rainbow(32)
)
mat = matrix(
c(round(pA, 2)),
nr = n,
nc = 1,
byrow = FALSE,
dimnames = list("Number in room" = 1:n, c("pA"))
)
as.table(mat)
}
mybirthday(32)
# One problem is the size of the numbers
# Use log to make calculation manageable lfactorial is the log of the factorial
# Below is log(P(AC))
logpAc = lfactorial(365)-lfactorial(365-(1:n))-(1:n)*log(365^n)
pAc = exp(logpAc)
pA = 1 - pAc
names(pA) = 1:n
pie(
pA,
col = rainbow(32)
)
mat = matrix(
c(round(pA, 2)),
nr = n,
nc = 1,
byrow = FALSE,
dimnames = list("Number in room" = 1:n, c("pA"))
)
mybirthday = function(n)
{
# One problem is the size of the numbers
# Use log to make calculation manageable lfactorial is the log of the factorial
# Below is log(P(AC))
logpAc = lfactorial(365)-lfactorial(365-(1:n))-(1:n)*log(365^n)
pAc = exp(logpAc)
pA = 1 - pAc
names(pA) = 1:n
pie(
pA,
col = rainbow(32)
)
mat = matrix(
c(round(pA, 2)),
nr = n,
nc = 1,
byrow = FALSE,
dimnames = list("Number in room" = 1:n, c("pA"))
)
as.table(mat)
}
mybirthday(32)
mybirthday = function(n)
{
# One problem is the size of the numbers
# Use log to make calculation manageable lfactorial is the log of the factorial
# Below is log(P(AC))
logpAc = lfactorial(365)-lfactorial(365-(1:n))-(1:n)*log(n^365)
pAc = exp(logpAc)
pA = 1 - pAc
names(pA) = 1:n
pie(
pA,
col = rainbow(32)
)
mat = matrix(
c(round(pA, 2)),
nr = n,
nc = 1,
byrow = FALSE,
dimnames = list("Number in room" = 1:n, c("pA"))
)
as.table(mat)
}
mybirthday(32)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
margin.table(data.frame(Fingerprint_Experts=c(92.12,99.39,100.00),Novices=c(74.55,44.82,77.03)))
data.frame(Fingerprint_Experts=c(92.12,99.39,100.00),Novices=c(74.55,44.82,77.03))
data.frame(Fingerprint_Experts=c(92.12,99.39,100.00),Novices=c(74.55,44.82,77.03))->x
crosstabs(x)
addmargins(x)
table(x)
matrix(x)
matrix(x)%>%margins()
margins(matrix(x))
addmargins(matrix(x))
margin.table(x)
library(magrittr)
library(mgrittr)
setwd("~/Dropbox/R/assignment2")
