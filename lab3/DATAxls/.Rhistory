my.newt=function(x0,f=myfun,delta=0.0001,epsilon=1e-12,xr1=c(0,2*pi),xr2=c(1,1.6),parameter="theta"){
graphics.off()
# x0 initial value
#f the function to be zeroed
#delta is the increment in the derivative
#epsilon is how close our approximation is to zero
fdash=function(x) (f(x+delta)-f(x))/delta
d=1000 # initial values
i=0
x=c() # empty vectors
y=c()
x[1]=x0 # assign initial guess
y[1]=f(x[1]) # initial y value
while(d > epsilon & i<100){ # ensures that it doesnt loop too much
i=i+1
x[i+1]=x[i]-f(x[i])/fdash(x[i]) # NR step
y[i+1]=f(x[i+1]) # update y value
d=abs(y[i+1]) # update d
}
windows()
layout(matrix(1:2,nr=2,nc=1,byrow=TRUE),heights=c(3,4))
curve(f(x), xlim=xr1,xlab=parameter,ylab="f",main="f")
curve(f(x),xlim=xr2,xaxt="n", xlab=parameter,ylab="f",main=  "Newton-Raphson Algorithm")
points(x,y,col="Red",pch=19,cex=1.5)
axis(1,x,round(x,2),las=2)
abline(h=0,col="Red")
segments(x[1:(i-1)],y[1:(i-1)],x[2:i],rep(0,i-1),col="Blue",lwd=2)
segments(x[2:i],rep(0,i-1),x[2:i],y[2:i],lwd=0.5,col="Green")
x
}
my.newt(1.32)
my.newt=function(x0,f=myfun,delta=0.0001,epsilon=1e-12,xr1=c(0,2*pi),xr2=c(1,1.6),parameter="theta"){
graphics.off()
# x0 initial value
#f the function to be zeroed
#delta is the increment in the derivative
#epsilon is how close our approximation is to zero
fdash=function(x) (f(x+delta)-f(x))/delta
d=1000 # initial values
i=0
x=c() # empty vectors
y=c()
x[1]=x0 # assign initial guess
y[1]=f(x[1]) # initial y value
while(d > epsilon & i<100){ # ensures that it doesnt loop too much
i=i+1
x[i+1]=x[i]-f(x[i])/fdash(x[i]) # NR step
y[i+1]=f(x[i+1]) # update y value
d=abs(y[i+1]) # update d
}
windows()
layout(matrix(1:2,nr=2,nc=1,byrow=TRUE),heights=c(3,4))
curve(f(x), xlim=xr1,xlab=parameter,ylab="f",main="f")
abline(h=0,col="Red",lwd=2)
curve(f(x),xlim=xr2,xaxt="n", xlab=parameter,ylab="f",main=  "Newton-Raphson Algorithm")
points(x,y,col="Red",pch=19,cex=1.5)
axis(1,x,round(x,2),las=2)
abline(h=0,col="Red")
segments(x[1:(i-1)],y[1:(i-1)],x[2:i],rep(0,i-1),col="Blue",lwd=2)
segments(x[2:i],rep(0,i-1),x[2:i],y[2:i],lwd=0.5,col="Green")
x
}
my.newt(1.32)
my.newt(1.32,xr2=c(1.33,1.55))
# The Newton-Raphson algorithm function
my.newt=function(x0,f=myfun,delta=0.0001,epsilon=1e-12,xr1=c(0,2*pi),xr2=c(1,1.6),parameter="theta"){
graphics.off()
# x0 initial value
#f the function to be zeroed
#delta is the increment in the derivative
#epsilon is how close our approximation is to zero
fdash=function(x) (f(x+delta)-f(x))/delta
d=1000 # initial values
i=0
x=c() # empty vectors
y=c()
x[1]=x0 # assign initial guess
y[1]=f(x[1]) # initial y value
while(d > epsilon & i<100){ # ensures that it doesnt loop too much
i=i+1
x[i+1]=x[i]-f(x[i])/fdash(x[i]) # NR step
y[i+1]=f(x[i+1]) # update y value
d=abs(y[i+1]) # update d
}
windows()
layout(matrix(1:2,nr=2,nc=1,byrow=TRUE),heights=c(3,4))
curve(f(x), xlim=xr1,xlab=parameter,ylab="f",main="f")
abline(h=0,col="Red",lwd=2)
curve(f(x),xlim=xr2,xaxt="n", xlab=parameter,ylab="f",main=  "Newton-Raphson Algorithm")
points(x,y,col="Red",pch=19,cex=1.5)
axis(1,x,round(x,2),las=2)
abline(h=0,col="Red")
segments(x[1:(i-1)],y[1:(i-1)],x[2:i],rep(0,i-1),col="Blue",lwd=0.5)
segments(x[2:i],rep(0,i-1),x[2:i],y[2:i],lwd=0.5,col="Green")
x
}
my.newt(1.32,xr2=c(1.33,1.55))
# The Newton-Raphson algorithm function
my.newt=function(x0,f=myfun,delta=0.0001,epsilon=1e-12,xr1=c(0,2*pi),xr2=c(1,1.6),parameter="theta"){
graphics.off()
# x0 initial value
#f the function to be zeroed
#delta is the increment in the derivative
#epsilon is how close our approximation is to zero
fdash=function(x) (f(x+delta)-f(x))/delta
d=1000 # initial values
i=0
x=c() # empty vectors
y=c()
x[1]=x0 # assign initial guess
y[1]=f(x[1]) # initial y value
while(d > epsilon & i<100){ # ensures that it doesnt loop too much
i=i+1
x[i+1]=x[i]-f(x[i])/fdash(x[i]) # NR step
y[i+1]=f(x[i+1]) # update y value
d=abs(y[i+1]) # update d
}
windows()
layout(matrix(1:2,nr=2,nc=1,byrow=TRUE),heights=c(3,4))
curve(f(x), xlim=xr1,xlab=parameter,ylab="f",main="f")
abline(h=0,col="Red",lwd=2)
curve(f(x),xlim=xr2,xaxt="n", xlab=parameter,ylab="f",main=  "Newton-Raphson Algorithm")
points(x,y,col="Red",pch=19,cex=1.5)
axis(1,x,round(x,2),las=2)
abline(h=0,col="Red")
segments(x[1:(i-1)],y[1:(i-1)],x[2:i],rep(0,i-1),col="Blue",lwd=0.5)
segments(x[2:i],rep(0,i-1),x[2:i],y[2:i],lwd=0.5,col="Green")
x
}
my.newt(1.32,xr2=c(1.5,1.55))
# The Newton-Raphson algorithm function
my.newt=function(x0,f=myfun,delta=0.0001,epsilon=1e-12,xr1=c(0,2*pi),xr2=c(1,1.6),parameter="theta"){
graphics.off()
# x0 initial value
#f the function to be zeroed
#delta is the increment in the derivative
#epsilon is how close our approximation is to zero
fdash=function(x) (f(x+delta)-f(x))/delta
d=1000 # initial values
i=0
x=c() # empty vectors
y=c()
x[1]=x0 # assign initial guess
y[1]=f(x[1]) # initial y value
while(d > epsilon & i<100){ # ensures that it doesnt loop too much
i=i+1
x[i+1]=x[i]-f(x[i])/fdash(x[i]) # NR step
y[i+1]=f(x[i+1]) # update y value
d=abs(y[i+1]) # update d
}
windows()
layout(matrix(1:2,nr=2,nc=1,byrow=TRUE),heights=c(3,4))
curve(f(x), xlim=xr1,xlab=parameter,ylab="f",main="f")
abline(h=0,col="Red",lwd=2)
curve(f(x),xlim=xr2,xaxt="n", xlab=parameter,ylab="f",main=  "Newton-Raphson Algorithm")
points(x,y,col="Red",pch=19,cex=1.5)
axis(1,x,round(x,2),las=2)
abline(h=0,col="Red")
segments(x[1:(i-1)],y[1:(i-1)],x[2:i],rep(0,i-1),col="Blue",lwd=0.5)
segments(x[2:i],rep(0,i-1),x[2:i],y[2:i],lwd=0.5,col="Green")
x
}
my.newt(1.32,xr2=c(1.3,1.55))
# The Newton-Raphson algorithm function
my.newt=function(x0,f=myfun,delta=0.0001,epsilon=1e-12,xr1=c(0,2*pi),xr2=c(1,1.6),parameter="theta"){
graphics.off()
# x0 initial value
#f the function to be zeroed
#delta is the increment in the derivative
#epsilon is how close our approximation is to zero
fdash=function(x) (f(x+delta)-f(x))/delta
d=1000 # initial values
i=0
x=c() # empty vectors
y=c()
x[1]=x0 # assign initial guess
y[1]=f(x[1]) # initial y value
while(d > epsilon & i<100){ # ensures that it doesnt loop too much
i=i+1
x[i+1]=x[i]-f(x[i])/fdash(x[i]) # NR step
y[i+1]=f(x[i+1]) # update y value
d=abs(y[i+1]) # update d
}
windows()
layout(matrix(1:2,nr=2,nc=1,byrow=TRUE),heights=c(3,4))
curve(f(x), xlim=xr1,xlab=parameter,ylab="f",main="f")
abline(h=0,col="Red",lwd=2)
curve(f(x),xlim=xr2,xaxt="n", xlab=parameter,ylab="f",main=  "Newton-Raphson Algorithm")
points(x,y,col="Red",pch=19,cex=1.5)
axis(1,x,round(x,2),las=2)
abline(h=0,col="Red")
segments(x[1:(i-1)],y[1:(i-1)],x[2:i],rep(0,i-1),col="Blue",lwd=0.5)
segments(x[2:i],rep(0,i-1),x[2:i],y[2:i],lwd=0.5,col="Green")
x
}
my.newt(1.32,xr2=c(1.5,1.55))
# The Newton-Raphson algorithm function
my.newt=function(x0,f=myfun,delta=0.0001,epsilon=1e-12,xr1=c(0,2*pi),xr2=c(0,pi/2),parameter="theta"){
graphics.off()
# x0 initial value
#f the function to be zeroed
#delta is the increment in the derivative
#epsilon is how close our approximation is to zero
fdash=function(x) (f(x+delta)-f(x))/delta
d=1000 # initial values
i=0
x=c() # empty vectors
y=c()
x[1]=x0 # assign initial guess
y[1]=f(x[1]) # initial y value
while(d > epsilon & i<100){ # ensures that it doesnt loop too much
i=i+1
x[i+1]=x[i]-f(x[i])/fdash(x[i]) # NR step
y[i+1]=f(x[i+1]) # update y value
d=abs(y[i+1]) # update d
}
windows()
layout(matrix(1:2,nr=2,nc=1,byrow=TRUE),heights=c(3,4))
curve(f(x), xlim=xr1,xlab=parameter,ylab="f",main="f")
abline(h=0,col="Red",lwd=2)
curve(f(x),xlim=xr2,xaxt="n", xlab=parameter,ylab="f",main=  "Newton-Raphson Algorithm")
points(x,y,col="Red",pch=19,cex=1.5)
axis(1,x,round(x,2),las=2)
abline(h=0,col="Red")
segments(x[1:(i-1)],y[1:(i-1)],x[2:i],rep(0,i-1),col="Blue",lwd=0.5)
segments(x[2:i],rep(0,i-1),x[2:i],y[2:i],lwd=0.5,col="Green")
x
}
my.newt(1.5)
my.newt(1.5,xr2=c(1.499,1.51))
my.newt=function(x0,f=myfun,delta=0.0001,epsilon=1e-12,xr1=c(0,2*pi),xr2=c(0,pi/2),parameter="theta"){
graphics.off()
# x0 initial value
#f the function to be zeroed
#delta is the increment in the derivative
#epsilon is how close our approximation is to zero
fdash=function(x) (f(x+delta)-f(x))/delta
d=1000 # initial values
i=0
x=c() # empty vectors
y=c()
x[1]=x0 # assign initial guess
y[1]=f(x[1]) # initial y value
while(d > epsilon & i<100){ # ensures that it doesnt loop too much
i=i+1
x[i+1]=x[i]-f(x[i])/fdash(x[i]) # NR step
y[i+1]=f(x[i+1]) # update y value
d=abs(y[i+1]) # update d
}
windows()
layout(matrix(1:2,nr=2,nc=1,byrow=TRUE),heights=c(3,4))
curve(f(x), xlim=xr1,xlab=parameter,ylab="f",main=paste("f=",myfun,sep=""))
abline(h=0,col="Red",lwd=2)
curve(f(x),xlim=xr2,xaxt="n", xlab=parameter,ylab="f",main=  "Newton-Raphson Algorithm")
points(x,y,col="Red",pch=19,cex=0.5)
axis(1,x,round(x,2),las=2)
abline(h=0,col="Red")
segments(x[1:(i-1)],y[1:(i-1)],x[2:i],rep(0,i-1),col="Blue",lwd=0.5)
segments(x[2:i],rep(0,i-1),x[2:i],y[2:i],lwd=0.5,col="Green")
x
}
my.newt(1.5)
myfun
as.character(myfun)
class(myfun)
# The Newton-Raphson algorithm function
my.newt=function(x0,f=myfun,delta=0.0001,epsilon=1e-12,xr1=c(0,2*pi),xr2=c(0,pi/2),parameter="theta"){
graphics.off()
# x0 initial value
#f the function to be zeroed
#delta is the increment in the derivative
#epsilon is how close our approximation is to zero
fdash=function(x) (f(x+delta)-f(x))/delta
d=1000 # initial values
i=0
x=c() # empty vectors
y=c()
x[1]=x0 # assign initial guess
y[1]=f(x[1]) # initial y value
while(d > epsilon & i<100){ # ensures that it doesnt loop too much
i=i+1
x[i+1]=x[i]-f(x[i])/fdash(x[i]) # NR step
y[i+1]=f(x[i+1]) # update y value
d=abs(y[i+1]) # update d
}
windows()
layout(matrix(1:2,nr=2,nc=1,byrow=TRUE),heights=c(3,4))
curve(f(x), xlim=xr1,xlab=parameter,ylab="f",main="myfun")
abline(h=0,col="Red",lwd=2)
curve(f(x),xlim=xr2,xaxt="n", xlab=parameter,ylab="f",main=  "Newton-Raphson Algorithm")
points(x,y,col="Red",pch=19,cex=0.5)
axis(1,x,round(x,2),las=2)
abline(h=0,col="Red")
segments(x[1:(i-1)],y[1:(i-1)],x[2:i],rep(0,i-1),col="Blue",lwd=0.5)
segments(x[2:i],rep(0,i-1),x[2:i],y[2:i],lwd=0.5,col="Green")
x
}
my.newt(1.5)
my.newt=function(x0,f=myfun,delta=0.0001,epsilon=1e-12,xr1=c(0,2*pi),xr2=c(0,pi/2),parameter="theta"){
graphics.off()
# x0 initial value
#f the function to be zeroed
#delta is the increment in the derivative
#epsilon is how close our approximation is to zero
fdash=function(x) (f(x+delta)-f(x))/delta
d=1000 # initial values
i=0
x=c() # empty vectors
y=c()
x[1]=x0 # assign initial guess
y[1]=f(x[1]) # initial y value
while(d > epsilon & i<100){ # ensures that it doesnt loop too much
i=i+1
x[i+1]=x[i]-f(x[i])/fdash(x[i]) # NR step
y[i+1]=f(x[i+1]) # update y value
d=abs(y[i+1]) # update d
}
windows()
layout(matrix(1:2,nr=2,nc=1,byrow=TRUE),heights=c(3,4))
curve(f(x), xlim=xr1,xlab=parameter,ylab="f",main="myfun")
abline(h=0,col="Red",lwd=2);
curve(f(x),xlim=xr2,xaxt="n", xlab=parameter,ylab="f",main=  "Newton-Raphson Algorithm")
points(x,y,col="Red",pch=19,cex=0.5)
axis(1,x,round(x,2),las=2)
abline(h=0,col="Red")
segments(x[1:(i-1)],y[1:(i-1)],x[2:i],rep(0,i-1),col="Blue",lwd=0.5)
segments(x[2:i],rep(0,i-1),x[2:i],y[2:i],lwd=0.5,col="Green")
x
}
my.newt(1.5)
my.newt=function(x0,f=myfun,delta=0.0001,epsilon=1e-12,xr1=c(0,2*pi),xr2=c(0,pi/2),parameter="theta"){
graphics.off()
# x0 initial value
#f the function to be zeroed
#delta is the increment in the derivative
#epsilon is how close our approximation is to zero
fdash=function(x) (f(x+delta)-f(x))/delta
d=1000 # initial values
i=0
x=c() # empty vectors
y=c()
x[1]=x0 # assign initial guess
y[1]=f(x[1]) # initial y value
while(d > epsilon & i<100){ # ensures that it doesnt loop too much
i=i+1
x[i+1]=x[i]-f(x[i])/fdash(x[i]) # NR step
y[i+1]=f(x[i+1]) # update y value
d=abs(y[i+1]) # update d
}
windows()
layout(matrix(1:2,nr=2,nc=1,byrow=TRUE),heights=c(3,4))
curve(f(x), xlim=xr1,xlab=parameter,ylab="f",main="myfun")
abline(h=0,col="Red",lwd=2);
curve(f(x),xlim=xr2,xaxt="n", xlab=parameter,ylab="f",main=  "Newton-Raphson Algorithm")
points(x,y,col="Red",pch=19,cex=0.5)
axis(1,x,round(x,2),las=2)
abline(h=0,col="Red")
segments(x[1:(i-1)],y[1:(i-1)],x[2:i],rep(0,i-1),col="Blue",lwd=0.5)
segments(x[2:i],rep(0,i-1),x[2:i],y[2:i],lwd=0.5,col="Green")
x
}
my.newt(0.5)
my.newt=function(x0,f=myfun,delta=0.0001,epsilon=1e-12,xr1=c(0,2*pi),xr2=c(0,pi/2),parameter="theta"){
graphics.off()
# x0 initial value
#f the function to be zeroed
#delta is the increment in the derivative
#epsilon is how close our approximation is to zero
fdash=function(x) (f(x+delta)-f(x))/delta
d=1000 # initial values
i=0
x=c() # empty vectors
y=c()
x[1]=x0 # assign initial guess
y[1]=f(x[1]) # initial y value
while(d > epsilon & i<100){ # ensures that it doesnt loop too much
i=i+1
x[i+1]=x[i]-f(x[i])/fdash(x[i]) # NR step
y[i+1]=f(x[i+1]) # update y value
d=abs(y[i+1]) # update d
}
windows()
layout(matrix(1:2,nr=2,nc=1,byrow=TRUE),heights=c(3,4))
curve(f(x), xlim=xr1,xlab=parameter,ylab="f",main="myfun")
abline(h=0,col="Red",lwd=2);
curve(f(x),xlim=xr2,xaxt="n", xlab=parameter,ylab="f",main=  "Newton-Raphson Algorithm")
points(x,y,col="Red",pch=19,cex=0.5)
axis(1,x,round(x,2),las=2)
abline(h=0,col="Red")
segments(x[1:(i-1)],y[1:(i-1)],x[2:i],rep(0,i-1),col="Blue",lwd=0.5)
segments(x[2:i],rep(0,i-1),x[2:i],y[2:i],lwd=0.5,col="Green")
x
}
my.newt(1)
my.newt=function(x0,f=myfun,delta=0.0001,epsilon=1e-12,xr1=c(0,2*pi),xr2=c(0,pi/2),parameter="theta"){
graphics.off()
# x0 initial value
#f the function to be zeroed
#delta is the increment in the derivative
#epsilon is how close our approximation is to zero
fdash=function(x) (f(x+delta)-f(x))/delta
d=1000 # initial values
i=0
x=c() # empty vectors
y=c()
x[1]=x0 # assign initial guess
y[1]=f(x[1]) # initial y value
while(d > epsilon & i<100){ # ensures that it doesnt loop too much
i=i+1
x[i+1]=x[i]-f(x[i])/fdash(x[i]) # NR step
y[i+1]=f(x[i+1]) # update y value
d=abs(y[i+1]) # update d
}
windows()
layout(matrix(1:2,nr=2,nc=1,byrow=TRUE),heights=c(3,4))
curve(f(x), xlim=xr1,xlab=parameter,ylab="f",main="myfun")
abline(h=0,col="Red",lwd=2);
curve(f(x),xlim=xr2,xaxt="n", xlab=parameter,ylab="f",main=  "Newton-Raphson Algorithm")
points(x,y,col="Red",pch=19,cex=0.5)
axis(1,x,round(x,2),las=2)
abline(h=0,col="Red")
segments(x[1:(i-1)],y[1:(i-1)],x[2:i],rep(0,i-1),col="Blue",lwd=0.5)
segments(x[2:i],rep(0,i-1),x[2:i],y[2:i],lwd=0.5,col="Green")
x
}
my.newt(1)
myfun=function(x) (300*sin(x)*cos(x) +20*(cos(x)^2-sin(x)^2))^2
my.newt=function(x0,f=myfun,delta=0.0001,epsilon=1e-12,xr1=c(0,2*pi),xr2=c(0,pi/2),parameter="theta"){
graphics.off()
# x0 initial value
#f the function to be zeroed
#delta is the increment in the derivative
#epsilon is how close our approximation is to zero
fdash=function(x) (f(x+delta)-f(x))/delta
d=1000 # initial values
i=0
x=c() # empty vectors
y=c()
x[1]=x0 # assign initial guess
y[1]=f(x[1]) # initial y value
while(d > epsilon & i<100){ # ensures that it doesnt loop too much
i=i+1
x[i+1]=x[i]-f(x[i])/fdash(x[i]) # NR step
y[i+1]=f(x[i+1]) # update y value
d=abs(y[i+1]) # update d
}
windows()
layout(matrix(1:2,nr=2,nc=1,byrow=TRUE),heights=c(3,4))
curve(f(x), xlim=xr1,xlab=parameter,ylab="f",main="myfun")
abline(h=0,col="Red",lwd=2);
curve(f(x),xlim=xr2,xaxt="n", xlab=parameter,ylab="f",main=  "Newton-Raphson Algorithm")
points(x,y,col="Red",pch=19,cex=0.5)
axis(1,x,round(x,2),las=2)
abline(h=0,col="Red")
segments(x[1:(i-1)],y[1:(i-1)],x[2:i],rep(0,i-1),col="Blue",lwd=0.5)
segments(x[2:i],rep(0,i-1),x[2:i],y[2:i],lwd=0.5,col="Green")
x
}
my.newt(1)
my.newt(1.8)
myfun=function(x) 300*sin(x)*cos(x) +20*(cos(x)^2-sin(x)^2)
my.newt(1.8)
my.newt(1.5,xr2=c(1,2))
my.newt(3,xr1=c(3,4),xr2=c(3,3.8))
my.newt(3,xr2=c(3,3.2))
setwd("C:/Users/HyDRO-Lab/Google Drive/MATH4753/DATAxls")
dird="C:/Users/HyDRO-Lab/Google Drive/MATH4753/DATAxls/"
#my function to read data
myread=function(csv){
fl=paste(dird,csv,sep="")
read.table(fl,header=TRUE,sep=",")
}
mpg.df=myread("EPAGAS.csv")
EPAGAS <- read.csv("C:/Users/HyDRO-Lab/Google Drive/MATH4753/DATAxls/EPAGAS.csv")
View(EPAGAS)
mpg.df=EPAGAS
z=with(mpg.df,scale(MPG))
apply(z,2,mean)
apply(z,2,sd)
my.newt(1.1,xr2=c(1,2))
library(mvtnorm)
sn=matrix(c(100,100,100,400),nr=2,nc=2,byrow=TRUE)
mat=rmvnorm(100,mean=c(0,0),sigma=sn)
x1=mat[,1]
x2=mat[,2]
x1
x2
plot(x1,x2)
my.newt(1.1,xr2=c(1,2))
my.newt(1.0,xr2=c(1,2))
my.newt(1.0,xr2=c(1,2))
library("lattice", lib.loc="E:/R-3.1.2/library")
c(1,2,3,6)
rep(c(“ED”, “PP”, “MO”, “TC”), c(27, 24,22, 10))
rep(c("ed","pp" c(27, 24))
rep(c("ed","pp"),c(27,24))
mpg.df <- read.csv("C:/Users/HyDRO-Lab/Google Drive/MATH4753/DATAxls/EPAGAS.csv")
View(mpg.df)
setwd("C:/Users/HyDRO-Lab/Google Drive/MATH4753/DATAxls")
dird="C:/Users/HyDRO-Lab/Google Drive/MATH4753/DATAxls/"
myread=function(csv){
fl=paste(dird,csv,sep="")
read.table(fl,header=TRUE,sep=",")
}
mpg.df=myread("EPAGAS.csv")
head(mpg.df)
z=with(mpg.df,scale(MPG))
detach("package:lattice", unload=TRUE)
library("lattice", lib.loc="E:/R-3.1.2/library")
ls(
ls(
()
